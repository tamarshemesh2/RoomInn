yuvcoh96,daniella97
===============================================================================
Yuval Cohen, ID 314985243, yuval.cohen14@mail.huji.ac.il
Daniella Friedman, ID 327184776, daniella.friedman@mail.huji.ac.il
===============================================================================

                        Project 6 - Assembler
                        ---------------------


Submitted Files
---------------
README - This file.
SymbolTable.py - contains the table with all the symbols and their addresses in an instruction file
Assembler.py - manages the parsing and translating of the instructions
Code.py - manages the translation of the instructions to their binary form
Parser.py - manages the parsing of instructions by determining which type they are and dividing each
            instruction accordingly
Makefile - Makefile for a Assembler.py, project 6 using the Assembler run-file
Assembler - run the command: python3 Assembler.py $* ,on shell


Remarks
-------
We followed the given API from the lecture with a small change.
In the implementation of the Parser we chose to divide the shift operation from the normal comp and c_instruction
because its unique binary translation. That translation uses different bits in the binary instruction.(14-10 and
not 8-13).

To run enter these two commands:
make
Assembler <file.asm>